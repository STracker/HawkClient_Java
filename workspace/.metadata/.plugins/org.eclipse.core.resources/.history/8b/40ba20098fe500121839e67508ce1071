package HawkClient;

import java.net.URL;
import java.security.KeyStore.Builder;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class HawkClient {
	
	private final static String Algorithm = "HmacSHA256";
	
	public static String createAuthorizationHeader(URL url, String method, String timestamp, String nonce, HawkCredentials credentials, String payload, String ext) throws Exception {
		
		if (url == null || method == null || timestamp == null || nonce == null || credentials == null)
			throw new Exception("url, method, timestamp, nonce and credentials are required!");
		
		
	}
	
	private static String generateMAC(String normalized, HawkCredentials credentials) {
		
		try
	    {
	      Mac mac = Mac.getInstance(Algorithm);
	      try
	      {
	        mac.init(new SecretKeySpec(credentials.get_key().getBytes("UTF-8"), Algorithm));
	        return BaseEncoding.base64().encode(mac.doFinal(normalized.getBytes("UTF-8")));
	      }
	      catch (UnsupportedEncodingException uee)
	      {
	        throw new ServerError("Unable to encode with UTF-8", uee);
	      }
	      catch (InvalidKeyException e)
	      {
	        throw new DataError.Bad("Invalid key", e);
	      }
	    }
	    catch (NoSuchAlgorithmException nsae)
	    {
	      throw new DataError.Bad("Unknown encryption algorithm", nsae);
	    }
	}
	
	private static String generateNormalizedString(URL url, String method, String timestamp, String nonce, HawkCredentials credentials, String payload, String ext) {
		// Preparing the variables.
	    String header = "hawk.1.header";
	    method = method.toUpperCase();
	    String query = (url.getQuery() == null) ? "" : url.getQuery();
	    String uri = url.getPath() + query;
	    String host = url.getHost();
	    
	    // Not necessary in STracker.
	    // int port = url.getPort();
	    
	    payload = (payload == null) ? "" : payload;
		ext = (ext == null) ? "" : ext;
		
	    return header + "\n" + timestamp + "\n" + nonce + "\n" + method + "\n" + uri + "\n" + host + "\n" + payload + "\n" + host + "\n";
	}
}